; Read keypress from ROM 8 at address in (&FA,&FB)
; ------------------------------------------------
; Instead of doing LDA (&FA),0 the code does it manually
; Y is corrupted, so there's nothing to stop it doing:
; LDY #0, LDA (&FA),Y, RTS
LED38:
                ldy $FA                      ; Get low byte of key column address
                iny                          ; If &FF, jump to use other addresses
                beq LED42
                dey                          ; Restore address for &BFxx
                lda $BF00,y                  ; Read keyboard matrix for %xx111111yyyyyyyy
                rts                          ; Return with A=key state

LED42:
                lda $FB                      ; Get high byte of address
                cmp #$BB                     ; If &BB-&BE, jump to do
                bcs LED5E
                cmp #$AF                     ; If >&AF, jump to do &9FFF for  %xx01111111111111
                bcc LED58
                beq LED52                    ; If &AF, jump to read &AFFF for %xx10111111111111
                lda $B7FF                    ; Read from &B7FF for            %xx11011111111111
                rts

LED52:
                lda $FF                      ; Read Escape flag - padding to make equal timing?
                lda $AFFF                    ;  and read keypress at &AFFF
                rts                          ;

LED58:
                lda $FF                      ; Read Escape flag - padding to make equal timing?
                lda $9FFF                    ;  and read keypress at &9FFF
                rts                          ;

LED5E:
                lda $FB                      ; Get high byte of address again
                cmp #$BD                     ; If <&BD, jump to do &BBFF for  %xx11101111111111
                bcc LED6A
                beq LED70                    ; If &BD, jump to read &BDFF for %xx11110111111111
                lda $BEFF                    ; Read from &BEFF for            %xx11111011111111
                rts

LED6A:
                lda $FF                      ; Read Escape flag - padding to make equal timing?
                lda $BBFF                    ; ED6C= AD FF BB    -.;
                rts                          ; ED6F= 60          `

LED70:
                lda $FF                      ; Read Escape flag - padding to make equal timing?
                lda $BDFF                    ; ED72= AD FF BD    -.=
                rts                          ; ED75= 60          `
